#pragma config(UART_Usage, UART1, uartVEXLCD, baudRate19200, IOPins, None, None)
#pragma config(UART_Usage, UART2, uartNotUsed, baudRate4800, IOPins, None, None)
#pragma config(Sensor, in1,    manipPot,       sensorPotentiometer)
#pragma config(Sensor, in2,    liftPot,        sensorNone)
#pragma config(Motor,  port1,           frdrive,       tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           brdrive,       tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port3,           bldrive,       tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           liftOne,       tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           claw,          tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           flyfrnt,       tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           liftTwo,       tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port8,           flytop,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,           collection,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port10,          fldrive,       tmotorVex393_HBridge, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

#pragma platform(VEX2)

#pragma competitionControl(Competition)

#include "Vex_Competition_Includes.c"

// variables for the lift and cap manipulator
int liftAngle;
int manipAngle;
int Placeholder;
int errorLift;
int errorManip;
int motorPower;
int mControl;
int lControl;
int last_error;
// sets motors to correct power for lift
void liftMotorSet ( int value )
{
	motor[liftOne] = value;
	motor[liftTwo] = value;
}
//sets motors to correct power for manipulator
void manipMotorSet (int value )
{
	motor[Placeholder] = value;
}
// task for controlling the manipulator's movements
task CapControl()
{
	while(mControl)
	{
		errorManip = manipAngle - SensorValue(manipPot);
		motorPower = errorManip * .05;
		if(SensorValue(manipPot) >= Placeholder) motor[Placeholder] = 10;
		if(SensorValue(manipPot) <= Placeholder) motor[Placeholder] = 10;
		if(sgn(errorLift) != sgn(last_error) ) motor[Placeholder] = 10;
		if( motorPower > 127 ) motorPower = 127;
		if( motorPower < -127 ) motorPower = -127;
		manipMotorSet (motorPower);
		wait1Msec(20);
	}
	errorManip = last_error;
	wait1Msec(10);
}
//task for controlling the lift's movements
task LiftControl()
{
	while(lControl)
	{
		errorLift = liftAngle - SensorValue(manipPot);
		motorPower = errorLift * .05;
		if(SensorValue(liftPot) >= Placeholder) motor [liftTwo] = motor[liftOne] = 10;
		if(SensorValue(liftPot) <= Placeholder) motor [liftTwo] = motor[liftOne] = 10;
		if(sgn(errorLift) != sgn(last_error) ) motor [liftTwo] = motor[liftOne] = 10;
		if( motorPower > 127 ) motorPower = 127;
		if( motorPower < -127 ) motorPower = -127;
		liftMotorSet (motorPower);
		wait1Msec(20);
	}
	errorLift = last_error;
	wait1Msec(10);
}
void pre_auton()
{
	bStopTasksBetweenModes = true;
}
task autonomous()
{
	//Red Auton//
	/*
	motor[fldrive] = -127;
	motor[frdrive] = -127;
	motor[bldrive] = -127;
	motor[brdrive] = -127;
	wait1Msec(1750);
	motor[fldrive] = 0;
	motor[frdrive] = 0;
	motor[bldrive] = 0;
	motor[brdrive] = 0;
	wait1Msec(100);
	motor[collection] = 127;
	wait1Msec(100);
	motor[fldrive] = 127;
	motor[frdrive] = 127;
	motor[bldrive] = 127;
	motor[brdrive] = 127;
	wait1Msec(100);
	motor[fldrive] = 0;
	motor[frdrive] = 0;
	motor[bldrive] = 0;
	motor[brdrive] = 0;
	wait1Msec(500);
	motor[fldrive] = 127;
	motor[frdrive] = -127;
	motor[bldrive] = 127;
	motor[brdrive] = -127;
	wait1Msec(500);
	motor[collection] = 0;
	wait1Msec(115);
	motor[fldrive] = 0;
	motor[frdrive] = 0;
	motor[bldrive] = 0;
	motor[brdrive] = 0;
	motor[flyfrnt] = -80;
	motor[flymid] = -80;
	motor[flytop] = -80;
	wait1Msec(1300);
	motor[collection] = 127;
	wait1Msec(900);
	motor[collection] = 0;
	wait1Msec(100);
	motor[flyfrnt] = -127;
	motor[flymid] = -127;
	motor[flytop] = -127;
	wait1Msec(800);
	motor[collection] = 127;
	wait1Msec(800);
	motor[collection] = 0;
	wait1Msec(300);
	motor[frdrive] = -127;
	motor[brdrive] = -127;
	wait1Msec(400);
	motor[frdrive] = 0;
	motor[brdrive] = 0;
	motor[flyfrnt] = 0;
	motor[flymid] = 0;
	motor[flytop] = 0;
	wait1Msec(100);
	motor[fldrive] = -127;
	motor[bldrive] = -127;
	wait1Msec(500);
	motor[fldrive] = 0;
	motor[bldrive] = 0;
	wait1Msec(200);
	motor[fldrive] = -127;
	motor[frdrive] = -127;
	motor[bldrive] = -127;
	motor[brdrive] = -127;
	wait1Msec(1160);
	motor[fldrive] = 0;
	motor[frdrive] = 0;
	motor[bldrive] = 0;
	motor[brdrive] = 0;*/
	//Blue Auton//
	motor[fldrive] = -127;
	motor[frdrive] = -127;
	motor[bldrive] = -127;
	motor[brdrive] = -127;
	wait1Msec(1750);
	motor[fldrive] = 0;
	motor[frdrive] = 0;
	motor[bldrive] = 0;
	motor[brdrive] = 0;
	wait1Msec(100);
	motor[collection] = 127;
	wait1Msec(100);
	motor[fldrive] = 127;
	motor[frdrive] = 127;
	motor[bldrive] = 127;
	motor[brdrive] = 127;
	wait1Msec(100);
	motor[fldrive] = 0;
	motor[frdrive] = 0;
	motor[bldrive] = 0;
	motor[brdrive] = 0;
	wait1Msec(500);
	motor[fldrive] = -127;
	motor[frdrive] = 127;
	motor[bldrive] = -127;
	motor[brdrive] = 127;
	wait1Msec(500);
	motor[collection] = 0;
	wait1Msec(250);
	motor[fldrive] = 0;
	motor[frdrive] = 0;
	motor[bldrive] = 0;
	motor[brdrive] = 0;
	motor[flyfrnt] = -80;
	motor[flytop] = -80;
	wait1Msec(1400);
	motor[collection] = 127;
	wait1Msec(900);
	motor[collection] = 0;
	wait1Msec(100);
	motor[flyfrnt] = -127;
	motor[flytop] = -127;
	wait1Msec(700);
	motor[collection] = 127;
	wait1Msec(800);
	motor[collection] = 0;
	wait1Msec(300);
	motor[fldrive] = -127;
	motor[bldrive] = -127;
	wait1Msec(400);
	motor[fldrive] = 0;
	motor[bldrive] = 0;
	motor[flyfrnt] = 0;
	motor[flytop] = 0;
	wait1Msec(100);
	motor[frdrive] = -127;
	motor[brdrive] = -127;
	wait1Msec(500);
	motor[frdrive] = 0;
	motor[brdrive] = 0;
	wait1Msec(200);
	motor[fldrive] = -127;
	motor[frdrive] = -127;
	motor[bldrive] = -127;
	motor[brdrive] = -127;
	wait1Msec(1150);
	motor[fldrive] = 0;
	motor[frdrive] = 0;
	motor[bldrive] = 0;
	motor[brdrive] = 0;
}
task usercontrol()
{
	while (true)
	{
		startTask(CapControl);
		startTask(LiftControl);

		bLCDBacklight = true;
		string mainBattery;
		clearLCDLine(0);
		clearLCDLine(1);
		displayLCDString(0, 0, "Primary: ");
		sprintf(mainBattery, "%1.2f%c", nImmediateBatteryLevel/1000.0, 'V');
		displayNextLCDString(mainBattery);
		wait1Msec(20);
		//-----Drive-----//
		motor(fldrive) = vexRT(Ch3);
		motor(frdrive) = vexRT(Ch2);
		motor(bldrive) = vexRT(Ch3);
		motor(brdrive) = vexRT(Ch2);
		//-----Flywheel-----//
		if(vexRT(Btn8U)==1)
		{
			motor(flyfrnt) = -127;
			motor(flytop) = -127;
		}
		else if(vexRT(Btn8D)==1)
		{
			motor(flyfrnt) = -63;
			motor(flytop) = -63;
		}
		else if(vexRT(Btn8R)==1)
		{
			motor(flyfrnt) = 0;
			motor(flytop) = 0;
		}
		//----Collection----//
		if(vexRT(Btn5U)==1)
		{
			motor(collection) = 127;
		}
		else if(vexRT(Btn5D)==1)
		{
			motor(collection) = -127;
		}
		else
		{
			motor(collection) = 0;
		}
		//------Claw------//
		if(vexRT(Btn7L)==1)
		{
			motor(claw) = 127;
		}
		else if(vexRT(Btn7R)==1)
		{
			motor(claw) = -127;
		}
		else
		{
			motor(claw) = 0;
		}
		//-----Lift-----//
		if(Placeholder==1)
		{
			mControl = 1;
			manipAngle = Placeholder;
		}
		else if(Placeholder==1)
		{
			mControl = 1;
			manipAngle = Placeholder;
		}
		else if(Placeholder==1)
		{
			mControl = 1;
			manipAngle = Placeholder;
		}
		else if(Placeholder==1)
		{
			liftMotorSet (127);
			mControl = 0;
		}
		else if(Placeholder==1)
		{
			liftMotorSet (-127);
			mControl = 0;
		}
		else if(lControl == 0 && Placeholder == 0 && Placeholder ==0)
		{
			liftMotorSet (10);
		}
		//-----Cap-Manipulator----//
		if(Placeholder==1)
		{
			mControl = 1;
			manipAngle = Placeholder;
		}
		else if(Placeholder==1)
		{
			mControl = 1;
			manipAngle = Placeholder;
		}
		else if(Placeholder==1)
		{
			mControl = 1;
			manipAngle = Placeholder;
		}
		else if(Placeholder==1)
		{
			motor[liftOne] = 127;
			motor[liftTwo] = 127;
			mControl = 0;
		}
		else if(Placeholder==1)
		{
			motor[liftOne] = -127;
			motor[liftTwo] = -127;
			mControl = 0;
		}
		else if(lControl == 0 && Placeholder == 0 && Placeholder ==0)
		{
			motor[liftOne] = 10;
			motor[liftTwo] = 10;
		}
		wait1Msec(10);
	}
}
