// variables for the cap manipulator
int manipAngle;
int Placeholder;
int errorManip;
int ManipMotorPower;
int mControl;
#define MANIP_ARM_HOLD_RANGE_LOW Placeholder
#define MANIP_ARM_HOLD_RANGE_HIGH Placeholder
#define MANIP_ARM_HOLD_POWER 15
#define MANIP_ARM_UPPER_LIMIT Placeholder
#define MANIP_ARM_LOWER_LIMIT Placeholder

//sets motors to correct power for manipulator
void manipMotorSet (int value, int deadzone )
{
	int drive_value = value;
	
	// holding power
	if( (SensorValue[manipPot] > MANIP_ARM_HOLD_RANGE_LOW) && (SensorValue[manipPot] < MANIP_ARM_HOLD_RANGE_HIGH) )
	{
		if( (drive_value >= 0) && ( drive_value < MANIP_ARM_HOLD_POWER ) )
			drive_value = MANIP_ARM_HOLD_POWER;
	}
	// limit range at extreme end of range
	if( (SensorValue[manipPot] > MANIP_ARM_UPPER_LIMIT ) && (drive_value > 0) )
		drive_value = 0;
	if( (SensorValue[manipPot] < MANIP_ARM_LOWER_LIMIT ) && (drive_value < 0) )
		drive_value = 0;
	if(mControl)
		{
	if(abs(errorManip) < deadzone)
		drive_value = 10;
		}
	motor[Placeholder] = drive_value;
}

// task for controlling the manipulator's movements
task CapControl()
{
	mControl = 0;
	while(true)
	{
		while(mControl)
		{
			errorManip = manipAngle - SensorValue[manipPot];
			ManipMotorPower = (errorManip * .05) + 10;
			if( ManipMotorPower > 127 ) ManipMotorPower = 127;
			if( ManipMotorPower < -127 ) ManipMotorPower = -127;
			manipMotorSet (ManipMotorPower, 100);
			wait1Msec(10);
		}
		wait1Msec(10);
	}
}

//variables for the lift
int liftAngle;
int errorLift;
int LiftMotorPower;
int lControl;
#define LIFT_ARM_HOLD_RANGE_LOW Placeholder
#define LIFT_ARM_HOLD_RANGE_HIGH Placeholder
#define LIFT_ARM_HOLD_POWER 15
#define LIFT_ARM_UPPER_LIMIT Placeholder
#define LIFT_ARM_LOWER_LIMIT Placeholder

// sets motors to correct power for lift
void liftMotorSet ( int value, int deadzone )
{
	int drive_value = value;

	// holding power
	if( (SensorValue[liftPot] > LIFT_ARM_HOLD_RANGE_LOW) && (SensorValue[liftPot] < LIFT_ARM_HOLD_RANGE_HIGH) )
	{
		if( (drive_value >= 0) && ( drive_value < LIFT_ARM_HOLD_POWER ) )
			drive_value = LIFT_ARM_HOLD_POWER;
	}
	// limit range at extreme end of range
	if( (SensorValue[liftPot] > LIFT_ARM_UPPER_LIMIT ) && (drive_value > 0) )
		drive_value = 0;
	if( (SensorValue[liftPot] < LIFT_ARM_LOWER_LIMIT ) && (drive_value < 0) )
		drive_value = 0;
	if(lControl)
	{
	if(abs(errorLift) < deadzone)
		drive_value = 10;
		wait1Msec(10);
	}
	motor[liftOne] = drive_value;
	motor[liftTwo] = drive_value;
}

//task for controlling the lift's movements
task LiftControl()
{
	lControl = 0;
	while(true)
	{
		while(lControl)
		{
			errorLift = liftAngle - SensorValue[liftPot];
			LiftMotorPower = (errorLift * .05) + 10;
			if( LiftMotorPower > 127 ) LiftMotorPower = 127;
			if( LiftMotorPower < -127 ) LiftMotorPower = -127;
			liftMotorSet (LiftMotorPower, 100);
			wait1Msec(10);
		}
		wait1Msec(10);
	}
}
task usercontrol()
{
	startTask(CapControl);
	startTask(LiftControl);

	while (true)
	{
			//-----Lift-----//
		if(Placeholder==1)
		{
			lControl = 1;
			mControl = 1;
			manipAngle = Placeholder;
			liftAngle = Placeholder;
		}
		else if(Placeholder==1)
		{
			liftMotorSet (127, 0);
			lControl = 0;
		}
		else if(Placeholder==1)
		{
			liftMotorSet (-127, 0);
			lControl = 0;
		}
		//-----Cap-Manipulator----//
		if(Placeholder==1)
		{
			manipMotorSet (127, 0);
			mControl = 0;
		}
		else if(Placeholder==1)
		{
			manipMotorSet (-127, 0);
			mControl = 0;
		}
		wait1Msec(10);
	}
}
